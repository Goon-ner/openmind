/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NewNFTMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_getBalance"
      | "add"
      | "buy"
      | "deleteNft"
      | "getNft"
      | "getOnSale"
      | "items"
      | "owners"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NFTAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "_getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "deleteNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOnSale", values?: undefined): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_getBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOnSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace NFTAddedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    price: BigNumberish,
    seller: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, price: bigint, seller: string];
  export interface OutputObject {
    tokenId: bigint;
    price: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NewNFTMarket extends BaseContract {
  connect(runner?: ContractRunner | null): NewNFTMarket;
  waitForDeployment(): Promise<this>;

  interface: NewNFTMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _getBalance: TypedContractMethod<[], [bigint], "view">;

  add: TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  buy: TypedContractMethod<[_tokenId: BigNumberish], [void], "payable">;

  deleteNft: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getNft: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  getOnSale: TypedContractMethod<[], [bigint[]], "view">;

  items: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  owners: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "deleteNft"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getNft"
  ): TypedContractMethod<[_tokenId: BigNumberish], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getOnSale"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "items"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "NFTAdded"
  ): TypedContractEvent<
    NFTAddedEvent.InputTuple,
    NFTAddedEvent.OutputTuple,
    NFTAddedEvent.OutputObject
  >;

  filters: {
    "NFTAdded(uint256,uint256,address)": TypedContractEvent<
      NFTAddedEvent.InputTuple,
      NFTAddedEvent.OutputTuple,
      NFTAddedEvent.OutputObject
    >;
    NFTAdded: TypedContractEvent<
      NFTAddedEvent.InputTuple,
      NFTAddedEvent.OutputTuple,
      NFTAddedEvent.OutputObject
    >;
  };
}
